#+TITLE: Emacs Configuration
#+AUTHOR: Zachary Smith
#+EMAIL: z@zxmth.us
#+OPTIONS: toc:nil num:nil

Lots of ideas stolen (with admiration) from [[https://github.com/hrs][Harry R. Schwartz]].

* Basic Configurations

Use [[https://github.com/hrs/sensible-defaults.el/blob/master/sensible-defaults.el][sensible-defaults]]

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/packages/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+END_SRC

Show line numbers by default

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

Start the server by default
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

I like to see the column numbers as well as line numbers

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

Use spaces instead of tabs and set the default tabstop to 2

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

Don't litter my init file with custom settings
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC
* Packages

Use =use-package= for managing packages in emacs. Setup some default package
archives & initialize.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile
 (require 'use-package))
#+END_SRC

Compile packages and prefer the newest version

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC
* Set personal information

** Contact Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zachary Smith"
      user-mail-address "z@zxmth.us")
#+END_SRC
* Utility Functions

#+BEGIN_SRC emacs-lisp
(defun zxmth/add-auto-mode (mode &rest patterns)
  "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))
#+END_SRC
* Searching

** Auto-Complete
Enable auto-complete - I use the [[https://github.com/auto-complete/auto-complete][auto-complete]] package
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :config
  (ac-config-default))
#+END_SRC

** Helm

Use helm search for incremental completions and narrowing selections throughout emacs

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  (define-key global-map [remap list-buffers] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (define-key global-map [remap execute-extended-command] 'helm-M-x))
#+END_SRC
* Switch and rebalance windows when splitting

I generally want to switch to the new window after creating it.

#+BEGIN_SRC emacs-lisp
(defun zxmth/split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun zxmth/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

(global-set-key (kbd "C-x 2") 'zxmth/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'zxmth/split-window-right-and-switch)

#+END_SRC
* Rearrange buffers and frames

** Transpose Frames

I'm using [[https://www.emacswiki.org/emacs/download/transpose-frame.el][Transpose Frame]] to rearrange buffers and frames. These are some keybindings
to make them easier to move around. I use tmux outside of emacs and wanted to make
emacs frames behave a bit more like tmux when rearranging.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x M-t") 'transpose-frame)
(global-set-key (kbd "C-x M-SPC") 'flip-frame)
(global-set-key (kbd "C-x M-f") 'flop-frame)
(global-set-key (kbd "C-x M-r") 'rotate-frame)
(global-set-key (kbd "C-x M-.") 'rotate-frame-clockwise)
(global-set-key (kbd "C-x M-,") 'rotate-frame-anticlockwise)
#+END_SRC
* Make Emacs look nicer

** Use [[https://github.com/bbatsov/solarized-emacs][Solarized theme]]

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :config
  (setq solarized-high-contrast-mode-line t))

(load-theme 'solarized-dark t)
#+END_SRC

* UI preferences

** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

Make the frame title match the current project as defined by Projectile

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (setq powerline-arrow-shape 'arrow)
  (powerline-default-theme))
#+END_SRC
* Org Mode Settings

Use pretty bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis (...) that org displays when there’s stuff under a header.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

elisp template for org-mode
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

elisp template for org-mode

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Store org files in ~/org /consider moving to Dropbox for mobile sync/
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
(setq org-index-file (org-file-path "index.org"))
#+END_SRC

Define a few capture templates

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo"
         entry
         (file+headline org-index-file "Inbox")
         "* TODO %?\n")))
#+END_SRC
* Git

Magit is amazing...and I barely know how to use it... This [[https://github.com/magit/magit/wiki/Cheatsheet][Cheat Sheet]] is helpful.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)

  :config
  (setq git-commit-summary-max-length 50))
#+END_SRC
* Programming

** web-mode

Use web-mode for a host of basic web-y file formats

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :defer t
  :config
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-indent-style 2)
  (setq web-mode-markup-indent-offset 2)
(setq web-mode-sql-indent-offset 2))
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (add-hook 'web-mode-hook
           (lambda ()
             (rainbow-mode)
             (rspec-mode)))

 (zxmth/add-auto-mode
  'web-mode
  "\\.erb$"
  "\\.html$"
  "\\.php$"
  "\\.rhtml$")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq web-mode-enable-auto-indentation nil)
#+END_SRC

** JSX

Use rjsx-mode for jsx files.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :config
  (setq js2-basic-offset 2))
#+END_SRC
** Projectile

Use Projectile to help manage files related to projects. Use helm to search within projects.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer 1
  :config
  (projectile-mode)
  (setq projectile-enable-caching t)
  (setq projectile-mode-line
        '(:eval
          (format " [%s]"
                  (projectile-project-name)))))

(use-package helm-projectile
  :commands (helm-projectile helm-projectile-switch-project)
  :ensure t)

#+END_SRC

Use projectile-ag to search project for symbol under the cursor

#+BEGIN_SRC emacs-lisp
(defun zxmth/search-project-for-symbol-at-point ()
  "Use `projectile-ag' to search the current project for `symbol-at-point'."
  (interactive)
  (projectile-ag (projectile-symbol-at-point)))

(global-set-key (kbd "C-c v") 'projectile-ag)
(global-set-key (kbd "C-c C-v") 'zxmth/search-project-for-symbol-at-point)
#+END_SRC
