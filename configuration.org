#+TITLE: Emacs Configuration
#+AUTHOR: Zachary Smith
#+EMAIL: z@zxmth.us
#+OPTIONS: toc:nil num:nil

Lots of ideas stolen (with admiration) from [[https://github.com/hrs][Harry R. Schwartz]].

* Core Package Management Setup

Setup some default package archives & initialize.

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)
#+END_SRC

** Diminish

I make use of [[https://github.com/emacsmirror/diminish][diminish]] so make sure it is installed.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'diminish)
  (package-refresh-contents)
  (package-install 'diminish))
#+END_SRC

** use-package

Use [[https://github.com/jwiegley/use-package][use-package]] for managing packages in emacs.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)

(eval-when-compile
 (require 'use-package))
#+END_SRC

* Basic Configurations

Use [[https://github.com/hrs/sensible-defaults.el/blob/master/sensible-defaults.el][sensible-defaults]]

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/packages/sensible-defaults.el/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+END_SRC

Show line numbers by default. If using Emacs 26 or above, use
/global-display-line-numbers-mode/. Otherwise, use [[https://elpa.gnu.org/packages/nlinum.html][nlinum]].

#+BEGIN_SRC emacs-lisp
  (if (< emacs-major-version 26)
      (use-package nlinum
        :diminish
        :config
        (global-nlinum-mode t)
        (setq nlinum-format "%d "))
    (global-display-line-numbers-mode))
#+end_src

Start the server by default
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (if (server-running-p)
      (message "Server already running - Not starting server for this session")
    (server-start))
#+END_SRC

I like to see the column numbers as well as line numbers

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

Use spaces instead of tabs and set the default tabstop to 2

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

Don't litter my init file with custom settings

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC

If a file changes on disk, I want it to be reloaded/reverted in buffers

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Load Local Configurations

Sometimes a machine needs some customized configuration.

#+BEGIN_SRC emacs-lisp
  (setq local-cfg "~/.emacs.d/local.el")
  (if (file-exists-p local-cfg)
      (load-file local-cfg))
#+END_SRC

* Packages

** Compile packages and prefer the newest version

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :diminish
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

** Use dash.el for some handy functions

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)
#+END_SRC

** exec-path-from-shell

Use shell PATH when launched from graphical environments

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

* Set personal information

** Contact Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zachary Smith"
      user-mail-address "z@zxmth.us")
#+END_SRC

* Utility Functions

#+BEGIN_SRC emacs-lisp
  (defun zxmth/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun zxmth/disable-truncate-lines ()
    "Disable line truncation"
    (let ((inhibit-message t)
          message-log-max
          truncate-partial-width-windows)
      (toggle-truncate-lines t)))
#+END_SRC

* Evil Mode

I'd resisted this for a while but see some benefit to using vim bindings

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (setq evil-default-state 'emacs) ;; use emacs state by default and toggle evil with C-z
    (evil-mode 1))
#+END_SRC

** evil-surround

   /vim-surround/ is amazing and I wanted something like it in emacs - this
   works great

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

* Searching

** Auto-Complete

Enable auto-complete - I use the [[https://github.com/auto-complete/auto-complete][auto-complete]] package

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :diminish
  :config
  (ac-config-default)
  (add-to-list 'ac-modes 'name-of-mod)
  (define-globalized-minor-mode zxmth/global-auto-complete-mode
    auto-complete-mode (lambda ()
                       (if (not (minibufferp (current-buffer)))
                         (auto-complete-mode 1))
                       ))
  (zxmth/global-auto-complete-mode t))
#+END_SRC

Use [[http://company-mode.github.io/][company-mode]] for some auto-complete functionality for packages that
depend on it.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Ivy / Counsel / Swiper

Use [[https://github.com/abo-abo/swiper][Ivy, Counsel, and Swiper]] for completion front-end and search

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :bind
  ("C-c C-r" . 'ivy-resume)
  ("<f6>" . 'ivy-resume)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) "))

(use-package counsel
  :ensure t
  :diminish counsel-mode
  :bind
  ("M-x" . counsel-M-x)
  :config
  (counsel-mode 1))

(use-package swiper
  :ensure t
  :bind
  ("\C-s" . 'swiper))
#+END_SRC

** Silver Searcher

I have gotten pretty used to using Ag and find it handy with projectile.

#+BEGIN_SRC emacs-lisp
(use-package ag
   :config
   (setq ag-highlight-search t
         ag-reuse-window 't
         ag-reuse-buffers 't))
#+END_SRC

* Switch and rebalance windows when splitting

** Window Movement

I like having keys to more easily jump around open buffers

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c k") 'windmove-up)
(global-set-key (kbd "C-c j") 'windmove-down)
(global-set-key (kbd "C-c h") 'windmove-left)
(global-set-key (kbd "C-c l") 'windmove-right)
#+END_SRC

** Window Resizing

I often resize buffers - bind keys to resizing that are similar to navigation
Use /C-u #/ to make larger resize increments.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c K") 'enlarge-window)
(global-set-key (kbd "C-c J") 'shrink-window)
(global-set-key (kbd "C-c H") 'enlarge-window-horizontally)
(global-set-key (kbd "C-c L") 'shrink-window-horizontally)
#+END_SRC

I generally want to switch to the new window after creating it.

#+BEGIN_SRC emacs-lisp
(defun zxmth/split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new pane."
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun zxmth/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new pane."
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

(global-set-key (kbd "C-x 2") 'zxmth/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'zxmth/split-window-right-and-switch)

#+END_SRC

* Rearrange buffers and frames

** Transpose Frames

I'm using [[https://www.emacswiki.org/emacs/download/transpose-frame.el][Transpose Frame]] to rearrange buffers and frames. These are some keybindings
to make them easier to move around. I use tmux outside of emacs and wanted to make
emacs frames behave a bit more like tmux when rearranging.

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :config
  (global-set-key (kbd "C-x M-t") 'transpose-frame)
  (global-set-key (kbd "C-x M-SPC") 'flip-frame)
  (global-set-key (kbd "C-x M-f") 'flop-frame)
  (global-set-key (kbd "C-x M-r") 'rotate-frame)
  (global-set-key (kbd "C-x M-.") 'rotate-frame-clockwise)
  (global-set-key (kbd "C-x M-,") 'rotate-frame-anticlockwise))
#+END_SRC

** Use winner-mode

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** switch-window

switch-window is great for jumping around frames

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-minibuffer-shortcut ?z)
    (global-set-key (kbd "C-c o") 'switch-window)
    (global-set-key (kbd "C-c 1") 'switch-window-then-maximize)
    (global-set-key (kbd "C-c 2") 'switch-window-then-split-below)
    (global-set-key (kbd "C-c 3") 'switch-window-then-split-right)
    (global-set-key (kbd "C-c 0") 'switch-window-then-delete)

    (global-set-key (kbd "C-c 4 d") 'switch-window-then-dired)
    (global-set-key (kbd "C-c 4 f") 'switch-window-then-find-file)
    (global-set-key (kbd "C-c 4 r") 'switch-window-then-find-file-read-only)
    (global-set-key (kbd "C-c 4 C-f") 'switch-window-then-find-file)
    (global-set-key (kbd "C-c 4 C-o") 'switch-window-then-display-buffer)
    (global-set-key (kbd "C-c 4 0") 'switch-window-then-kill-buffer))
#+END_SRC

* Multiple Cursors

** Use [[https://github.com/magnars/multiple-cursors.el][Multiple Cursors]] by [[https://github.com/magnars][Magnar Sveen]]

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

* Make Emacs look nicer

** Use Solarized Theme

#+BEGIN_SRC emacs-lisp

  (defun zxmth/load-solarized-theme (&optional default-solarized-theme)
    (unless default-solarized-theme (setq default-solarized-theme 'solarized-dark))
    (load-theme default-solarized-theme)
    (zxmth/customize-solarized-theme))

  (defun zxmth/customize-solarized-theme ()
    ;; remove the box style for org-levelsq
    "Customize the solarized theme"
    (interactive)
    (dotimes (level 8)
      (set-face-attribute (intern-soft (format "org-level-%s" (+ 1 level)))
                          nil
                          :height 'unspecified
                          :background 'unspecified
                          :box 'unspecified))

    ;; make the block begin & end the same as the block body
    (let ((attributes '(org-block-end-line org-block-begin-line)))
      (dolist (attr attributes)
      (set-face-attribute attr
                          nil
                          :box 'unspecified
                          :background "#1c1f26"))))

  (defun zxmth/disable-enabled-themes ()
    "Disable all themes currently enabled"
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

  (defun zxmth/toggle-solarized-themes ()
    "Toggle between two solarized & solarized-light themes and make some customizations"
    (interactive)
    (setq themes-to-toggle '(solarized-dark solarized-light))
    (setq theme-to-enable (car (remove (car custom-enabled-themes) themes-to-toggle)))
    (zxmth/disable-enabled-themes)
    (zxmth/load-solarized-theme theme-to-enable))

  (use-package solarized-theme
      :ensure t
      :config
      (zxmth/customize-solarized-theme))

  (global-set-key (kbd "C-x /") 'zxmth/toggle-solarized-themes)

  (zxmth/load-solarized-theme)

#+END_SRC

* UI preferences

** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when (or (window-system) (daemonp))
    (scroll-bar-mode -1))
#+END_SRC

Make the frame title match the current project as defined by Projectile

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Use Telephone Line - like Powerline...but different!

#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :init
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
    :config
    (when (or (display-graphic-p) (daemonp))
      (telephone-line-mode 1)))
#+END_SRC

** Diminish minor modes

#+BEGIN_SRC emacs-lisp
(diminish 'auto-revert-mode)
#+END_SRC

* Org Mode Settings

** Some basic [[https://orgmode.org][Org-mode]] configurations

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (setq org-log-done 'time)
  (setq org-todo-keywords
    '((sequence "TODO(t)" "STARTED(s!)" "WAITING(w@/!)" "BLOCKED(b!)" "|" "DONE(d!)" "CANCELED(c@)")
      (sequence "QUESTION(q)" "LEARNING(l)" "|" "ANSWERED(a@)" "FORGET(f)")))

  (setq org-todo-keyword-faces
    '(("STARTED" . "#b58900")
      ("WAITING" . "#d33682")
      ("BLOCKED" . (:foreground "white" :background "#d33682" :weight bold))
      ("CANCELED" . "#83949")
      ("QUESTION" . "#cb4b16")
      ("LEARNING" . "#6c71c4")
      ("ANSWERED" . "#859900")
      ("FORGET" . "#839496")))
#+END_SRC

** Use pretty bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

** Syntax highlighting

Use syntax highlighting in source blocks while editing

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** TAB behavior

Make TAB act as if it were issued in the language's major mode

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

** Templates

elisp template for org-mode

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

todo templates

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("q" "** QUESTION ?"))
(add-to-list 'org-structure-template-alist
             '("t" "* TODO ?"))
(add-to-list 'org-structure-template-alist
             '("tt" "** TODO ?"))
(add-to-list 'org-structure-template-alist
             '("ttt" "*** TODO ?"))
#+END_SRC

** Configure org agenda, notes, and archive files

#+BEGIN_SRC emacs-lisp
  (defcustom org-agenda-dir-path org-directory
    "Path to my centrailized org files that comprise my agenda")

  (defcustom org-notes-directory (concat (file-name-as-directory org-directory) "notes")
    "Root of where org note files are saved")

  (defcustom org-remote-notes-directory nil
    "TRAMP path to a remote directory to search for notes")

  (defun org-agenda-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-agenda-dir-path) filename))

  (defcustom org-index-file (org-agenda-file-path "index.org")
    "Primary Org index file")

  (defcustom org-inbox-file (org-agenda-file-path "inbox.org")
    "Org file where new notes are captured - TODOs in this file can be moved to the org-index-file")

  (defcustom org-habit-file (org-agenda-file-path "habits.org")
    "Org file where repeating or habit based tasks are stored")

  (defcustom org-brain-file (org-agenda-file-path "brain.org")
    "File to collect lots of notes")

  (defcustom org-archive-location (concat (org-agenda-file-path "archive.org") "::* From %s")
    "File where completed Org tasks will be archived")

  (defcustom zxmth-org-agenda-files (-non-nil (list org-index-file org-inbox-file org-habit-file org-brain-file org-notes-directory org-remote-notes-directory))
    "List of files to include in constructing org agenda")

  (setq org-agenda-files zxmth-org-agenda-files)
#+END_SRC

** Auto-Save

Automatically save org files - mostly needed for keeping in sync over dropbox
since I tend to open and edit my agenda on multiple computers and don't always
remember to save... Also, don't log the message to the minibuffer because that
is annoying...

#+BEGIN_SRC emacs-lisp
  (add-hook 'auto-save-hook (lambda ()
                              (let ((inhibit-message t))
                                (org-save-all-org-buffers))))
#+END_SRC

** Capturing and storing tasks

Capture tasks in /inbox.org/ but copy them into the /index.org/ file and clean
up the /inbox/

#+BEGIN_SRC emacs-lisp
  (defun zxmth/move-tasks-from-inbox ()
    "Move contents of the org-inbox-file file to end of org-index-file and clear contents of org-inbox-file"
    (interactive)
    (when (file-exists-p org-inbox-file)
        (save-excursion
          (find-file org-index-file)
          (goto-char (point-max))
          (insert-file-contents org-inbox-file)
          ;; clear contents of the inbox after moving contents
          (find-file org-inbox-file)
          (delete-region (point-min) (point-max))
          (save-buffer)
          (kill-buffer))))
  (define-key org-mode-map (kbd "C-c C-x TAB") 'zxmth/move-tasks-from-inbox)
#+END_SRC

** Quick file access

Quickly open my index file

#+BEGIN_SRC emacs-lisp
  (defun zxmth/open-index-file ()
    "Open the file defined by variable org-index-file"
    (interactive)
    ;; first move any tasks over from the inbox
    (zxmth/move-tasks-from-inbox)
    (find-file org-index-file)
    (end-of-buffer))
  (global-set-key (kbd "C-c i") 'zxmth/open-index-file)

  (defun zxmth/open-brain-file ()
    "Open the main note taking document"
    (interactive)
    (find-file org-brain-file)
    (end-of-buffer))
  (global-set-key (kbd "C-c b") 'zxmth/open-brain-file)
#+END_SRC

** Capture template(s)

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(("t" "TODO"
           entry
           (file+headline org-index-file "Tasks")
           "** TODO %?\n")))
#+END_SRC

Quick capture TODO

#+BEGIN_SRC emacs-lisp
  (defun zxmth/org-capture-todo ()
    "Prompt to quickly capture a TODO using the TODO template"
    (interactive)
    (org-capture :keys "t"))
  (global-set-key (kbd "C-c M-n") 'zxmth/org-capture-todo)
#+END_SRC

** Archive DONE and CANCELED tasks

#+BEGIN_SRC emacs-lisp
  (defun zxmth/org-archive-complete-tasks (&optional archive-states)
    "Move DONE and CANCELED items to the org-archive-location"
    (interactive)
    (unless archive-states (setq archive-states '("DONE" "CANCELED")))
    (dolist (state archive-states)
      (org-map-entries 'org-archive-subtree (concat "/" state))))

  (define-key org-mode-map (kbd "\C-c A") 'zxmth/org-archive-complete-tasks)
#+END_SRC

** Enable spell-checking

I'm rael bad at spelling.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

** Agenda View

Build a custom agenda view that shows me TODOs marked as priority #A on top
followed by my tasks scheduled for the current day, tasks marked as started,
tasks marked as waiting, and then a list of all of my remaining TODOs

#+BEGIN_SRC emacs-lisp
  (defun zxmth/org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
       PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
               nil)))

  (defun zxmth/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (defun zxmth/org-skip-subtree-if-state-in (states)
    "Skip an agenda subtree if it has a todo state found in STATES"
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (skip nil))
      (dolist (state states skip)
        (setq task-state (org-entry-get nil "TODO"))
        (if (string= task-state state)
            (setq skip subtree-end)))))

  (setq org-agenda-custom-commands
        '(("d" "Daily Agenda"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-Priority Tasks:")))
            (tags "TODO=\"BLOCKED\""
                  ((org-agenda-overriding-header "Blocked:")))
            (agenda "" ((org-agenda-span 1)))
            (tags "TODO=\"WAITING\""
                  ((org-agenda-overriding-header "Waiting:")))
            (tags "TODO=\"STARTED\""
                  ((org-agenda-overriding-header "Started:")))
            (tags "TODO=\"QUESTION\"|TODO=\"LEARNING\""
                  ((org-agenda-overriding-header "Questions:")))
            (alltodo ""
                     ((org-agenda-skip-function '(or (zxmth/org-skip-subtree-if-habit)
                                                     (zxmth/org-skip-subtree-if-priority ?A)
                                                     (zxmth/org-skip-subtree-if-state-in '("WAITING" "STARTED" "BLOCKED" "QUESTION" "LEARNING"))
                                                     (org-agenda-skip-if nil '(scheduled deadline))
                                                     (org-agenda-skip-subtree-if 'regexp ":ignore:")))
                      (org-agenda-overriding-header "Backlog:")))))))

  (defun zxmth/pop-to-custom-daily-org-agenda ()
    "Visit the 'Daily Agenda' org agenda in the current window
     and close other windows"
    (interactive)
    (org-agenda nil "d");; open "Daily Agenda" custom command
    (delete-other-windows))
  (global-set-key (kbd "C-x !") 'zxmth/pop-to-custom-daily-org-agenda)
#+END_SRC

* Git

** Magit

Magit is amazing...and I barely know how to use it... This [[https://github.com/magit/magit/wiki/Cheatsheet][Cheat Sheet]] is helpful.

Turn on spell checking for commits - I make tons of typos :-(

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)

  :config
  (setq git-commit-summary-max-length 50)
  (add-hook 'git-commit-mode-hook 'turn-on-flyspell))
#+END_SRC

* Programming

** prettier

   Use [[https://github.com/prettier/prettier][prettier]] to format code

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
      :ensure t)
  ;;  :config
  ;;  (add-hook 'rjsx-mode-hook 'prettier-js-mode)
  ;;  (add-hook 'js2-mode-hook 'prettier-js-mode)
  ;;  (add-hook 'typescript-mode 'prettier-js-mode)
#+END_SRC

** eslintd_fix

[[https://github.com/aaronjensen/eslintd-fix][Aaron Jensen's]] awesome eslintd fix package

#+BEGIN_SRC emacs-lisp
  (use-package eslintd-fix
    :config
    (add-hook 'rjsx-mode-hook 'eslintd-fix-mode)
    (add-hook 'js2-mode-hook 'eslintd-fix-mode)
    (add-hook 'typescript-mode 'eslintd-fix-mode))
#+END_SRC

** web-mode

Use web-mode for a host of basic web-y file formats

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :defer t
    :config
    (setq web-mode-attr-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-indent-style 4)
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-sql-indent-offset 4)
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (add-hook 'web-mode-hook
           (lambda ()
             (rainbow-mode)
             (rspec-mode)))

 (zxmth/add-auto-mode
  'web-mode
  "\\.erb$"
  "\\.html$"
  "\\.rhtml$")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq web-mode-enable-auto-indentation nil)
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (progn
      (add-to-list
       'auto-mode-alist
       (cons "\.js$" (defun choose-js-type-mode ()
                       (save-excursion
                         (goto-char (point-min))
                         (let ((buff (current-buffer)))
                           (if (search-forward "React" nil t 1)
                               (rjsx-mode)
                             (js2-mode))))))))
    (setq js2-basic-offset 4)
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    (add-hook 'js2-mode-hook #'zxmth/disable-truncate-lines))
#+END_SRC

** JSX

Use rjsx-mode for jsx files.

#+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode
       :config
       (setq js2-basic-offset 4)
       (add-hook 'rjsx-mode-hook #'zxmth/disable-truncate-lines))
#+END_SRC

** JSON

Use json-mode

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :config
    (add-hook 'json-mode-hook #'zxmth/disable-truncate-lines))
#+END_SRC

** Tide (TypeScript)

#+BEGIN_SRC emacs-lisp
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1)
      (setq tide-format-options '(:tabSize 2 :indentSize 2)))

    (use-package tide
      :config
      (setq typescript-indent-level 2)
      (setq company-tooltip-align-annotations t)
      :after (typescript-mode company flycheck)
      :hook ((typescript-mode . setup-tide-mode)
             (typescript-mode . tide-hl-identifier-mode)
             (before-save . tide-format-before-save)
             (typescript-mode . zxmth/disable-truncate-lines)))
#+END_SRC

** PHP

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :mode "\\.php\\'"
    :ensure t
    :defer 1
    :config
    (add-hook 'php-mode-hook #'zxmth/disable-truncate-lines))
#+END_SRC

** Projectile

Use Projectile to help manage files related to projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer 1
    :init
    (setq projectile-keymap-prefix (kbd "C-c p"))
    :config
    (projectile-mode)
    (setq projectile-completion-system 'ivy)
    (setq projectile-enable-caching t)
    (setq projectile-mode-line
          '(:eval
            (format " [%s]"
                    (projectile-project-name)))))
#+END_SRC

Use projectile-ag to search project for symbol under the cursor

#+BEGIN_SRC emacs-lisp
(defun zxmth/search-project-for-symbol-at-point ()
  "Use `projectile-ag' to search the current project for `symbol-at-point'."
  (interactive)
  (projectile-ag (projectile-symbol-at-point)))

(global-set-key (kbd "C-c v") 'projectile-ag)
(global-set-key (kbd "C-c C-v") 'zxmth/search-project-for-symbol-at-point)
#+END_SRC

** Expand Region

[[https://github.com/magnars/][Magnar Sveen]] implemented one of my favorite features from IDEA...

#+BEGIN_SRC emacs-lisp
(use-package expand-region
   :config
   (global-set-key (kbd "C-%") 'er/expand-region))
#+END_SRC

** Rest Client

Handy, dandy rest client

#+BEGIN_SRC emacs-lisp
(use-package restclient)
#+END_SRC

** C mode

Use Linux coding standards for C - copied from [[https://www.kernel.org/doc/html/v4.10/process/coding-style.html#you-ve-made-a-mess-of-it][here]].

#+BEGIN_SRC emacs-lisp
  (defun c-lineup-arglist-tabs-only ()
    "Line up argument lists by tabs, not spaces"
    (let* ((anchor (c-langelem-pos c-syntactic-element))
           (column (c-langelem-2nd-pos c-syntactic-element))
           (offset (- (1+ column) anchor))
           (steps (floor offset c-basic-offset)))
      (* (max steps 1)
         c-basic-offset)))

  (add-hook 'c-mode-common-hook
            (lambda ()
              ;; Add kernel style
              (c-add-style
               "linux-tabs-only"
               '("linux" (c-offsets-alist
                          (arglist-cont-nonempty
                           c-lineup-gcc-asm-reg
                           c-lineup-arglist-tabs-only))))))

  (add-hook 'c-mode-hook
          (lambda ()
                  (setq indent-tabs-mode t)
                  (setq show-trailing-whitespace t)
                  (c-set-style "linux-tabs-only")))

  (add-hook 'c-mode-hook #'zxmth/disable-truncate-lines)
#+END_SRC

** Scala

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'scala-mode-hook #'zxmth/disable-truncate-lines))
#+END_SRC

* Writing

** Flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish 'flyspell-mode)
#+END_SRC

** Markdown

I like to write in markdown somtimes.
I often write markdown that will appear on Github...so prefer gfm by default.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands gfm-mode
  :mode (("\\.md$" . gfm-mode))
  :config
  (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
  (add-hook 'gfm-mode-hook 'flyspell-mode))
#+END_SRC

** Wrap paragraphs

/AutoFillMode/ automatically wraps paragraphs. This is typically what I want so
this should make sure that it wraps by default. Sometimes I don't want to use it
so give me a way to turn it off, too.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'gfm-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

* Helpers

** Google This

Searching from within emacs comes in handy

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :config
    (global-set-key (kbd "C-c /") 'google-this-mode-submap))
#+END_SRC

** Time

Show the time in 24 hour format

#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode)
#+END_SRC

/That's it for now!/
